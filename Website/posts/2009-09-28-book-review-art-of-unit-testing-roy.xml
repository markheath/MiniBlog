<post>
  <title>Book Review – The Art of Unit Testing (Roy Osherove)</title>
  <slug>book-review-art-of-unit-testing-roy</slug>
  <author>Mark Heath</author>
  <pubDate>2009-09-28 17:34:00</pubDate>
  <lastModified>2009-09-28 17:34:49</lastModified>
  <content>&lt;p&gt;&lt;a href="http://www.manning.com/osherove/"&gt;&lt;img style="margin: 8px; display: inline" align="left" src="/posts/files/book-review-art-of-unit-testing-roy-1.jpg"&gt;&lt;/a&gt; In this book, Roy Osherove gives a comprehensive introduction to unit testing. He explains why you would want unit tests in the first place, how to go about writing and running them, as well as addressing some of the challenges involved in introducing unit testing to projects or development teams.&lt;/p&gt;  &lt;p&gt;Those who have experience writing unit tests might not find a lot of new material in this book, but it is still worth skimming through as he often provides several ways of achieving a goal, one of which you may not have thought of.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Part 1&lt;/strong&gt; introduces unit tests and their benefits, and explains how they differ from integration tests. This elementary distinction is an important one as when many developers initially try to write their first unit tests, they actually write integration tests, ending up with tests that are fragile, unrepeatable and slow, and potentially putting them off from writing any more.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Part 2 &lt;/strong&gt;explains how mocks and stubs can be used to enable automated testing. He shows that you can make classes testable using several techniques, not just passing in interfaces for all dependencies. He introduces a few of the most popular mocking frameworks.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Part 3 &lt;/strong&gt;deals with the problem of managing and maintaining all your unit tests. He advocates continuous integration, keeping the tests simple, and presents a useful list of unit testing anti-patterns.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Part 4 &lt;/strong&gt;tackles some of the tricky issues of introducing unit testing into a legacy codebase, or into a development team that is resistant to change. Osherove is a pragmatist rather than a purist. He recognizes that you may have to start very small, and prove that the time taken to write the tests is worth it. &lt;/p&gt;  &lt;p&gt;Two appendices provide useful additional information on some of the OO design principles that make for testable code as well as summarising many of the open source and commercial unit testing tools and frameworks available. This is a very helpful resource, as it helps newcomers to navigate their way through the bewildering array of choices as well as highlighting some new tools that I hadn’t come across.&lt;/p&gt;  &lt;p&gt;Overall I would say this is an excellent book to pass round developers in a team that is considering using unit testing or is new to the practice. Doubtless some will be disappointed that he doesn’t stridently demand that TDD is used exclusively, but his honest realism is refreshing and may even prove more effective in winning over new converts to test driven development.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>unit testing</category>
    <category>book review</category>
    <category>TDD</category>
  </categories>
  <comments />
</post>