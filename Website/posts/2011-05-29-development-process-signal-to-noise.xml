<post>
  <title>Development process signal to noise ratio (a rant)</title>
  <slug>development-process-signal-to-noise</slug>
  <author>Mark Heath</author>
  <pubDate>2011-05-29 19:38:00</pubDate>
  <lastModified>2011-05-29 19:38:27</lastModified>
  <content>&lt;p&gt;In the world of audio recording, maintaining a high signal to noise ratio (SNR) is vital. Signal is the singer’s voice; noise is the traffic on the road outside. Signal is what we want to record; noise is what we don’t.&lt;/p&gt; &lt;p&gt;Just as noise can get introduced at any stage in the audio recording process, degrading the signal quality; the software development lifecycle has many points at which noise can be introduced. The only difference is, that the signal is &lt;em&gt;information&lt;/em&gt; rather than &lt;em&gt;sound&lt;/em&gt;. In software development, signal is information that is of use to me; noise is information that wastes my time.&lt;/p&gt; &lt;p&gt;In the audio world, if the signal to noise ratio is too low, it becomes simply too difficult or distracting to keep listening. The same is true with information. A low SNR to ratio bores people into switching off.&lt;/p&gt; &lt;p&gt;Here’s five areas in the software development / business process that you need to watch your SNR in…&lt;/p&gt; &lt;h3&gt;Meetings&lt;/h3&gt; &lt;p&gt;As a general rule, I dread meetings. They get me away from what I would rather be doing (coding). A meeting is maximally useful if the information that flows within it is relevant to all those present. Meetings to tell people things they already know, or that they don’t need to know, or that only one or two people need to know, are invitations to daydream, resulting in attendees missing the little that could have benefitted them.&lt;/p&gt; &lt;p&gt;The worst offenders are the “weekly” meetings, or meetings that are required by some kind of process (“kick off” meeting, “release” meeting, “checklist checker checking meeting”). If you attend a 90 minute meeting with only 5-10 minutes having relevance to you, something is wrong.&lt;/p&gt; &lt;p&gt;Talking in detail through &lt;em&gt;everyone’s &lt;/em&gt;weekly progress, or &lt;em&gt;everyone’s &lt;/em&gt;holiday plans, or &lt;em&gt;everyone’s &lt;/em&gt;tasks for next week, or &lt;em&gt;every &lt;/em&gt;open bug, or &lt;em&gt;every &lt;/em&gt;support case, is likely to be relevant only to the person who organized the meeting. For &lt;em&gt;everyone &lt;/em&gt;else, the meeting SNR is minimal.&lt;/p&gt; &lt;h3&gt;Documents&lt;/h3&gt; &lt;p&gt;Software documents, particularly those created from templates, also often suffer from poor SNR. Instead of getting right down to business telling us the crucial facts, we have to wade through pages of boilerplate sections marked “Not applicable”. &lt;/p&gt; &lt;p&gt;In one company I worked for, there were several pages in every software design document we ever produced devoted to the utterly irrelevant topic of PCB layout. If the first section of your document that contains useful information is numbered 4.6.12.5, something is wrong.&lt;/p&gt; &lt;p&gt;Documents with low SNR actively discourage people from reading. And the less likely anyone is to consult your document, the less motivated you are to write good documentation, resulting in a vicious cycle.&lt;/p&gt; &lt;h3&gt;Presentations&lt;/h3&gt; &lt;p&gt;Presentations can have terribly low SNR. A favourite example is presenters who try to follow the rule that says: &lt;em&gt;“Tell people what you are going to tell them, then tell them, then tell them what you told them”. &lt;/em&gt;&lt;/p&gt; &lt;p&gt;Fine advice, but not when they interpret this as &lt;em&gt;“tell people that you are telling them what it is that you are going to tell them, then tell them that you are telling them the things you told them you were going to tell them, and then tell them that you are telling them that you have finished telling them the things you told them you told them you were going to tell them.”&lt;/em&gt; Instead, use your introduction to make us &lt;em&gt;want &lt;/em&gt;to hear what is coming next.&lt;/p&gt; &lt;p&gt;As with meetings, any attempt to exhaustively cover a topic in a presentation is a mistake. Don’t show me &lt;em&gt;every &lt;/em&gt;possible graph and chart from last quarter’s financial results. Don’t show me &lt;em&gt;every &lt;/em&gt;feature and configuration option.&lt;em&gt;&amp;nbsp;&lt;/em&gt;Show me something interesting. Leave me wanting more at the end of your presentation, not praying for it to end. &lt;/p&gt; &lt;h3&gt;Comments&lt;/h3&gt; &lt;p&gt;Comments in source code are also prime offenders for low SNR. Comments that state the obvious, or are sources of misinformation soon train the developer to completely ignore comments. It’s like the boy who cries wolf. Soon no one is listening anymore. The one really helpful comment you write might as well be invisible. No one will read it.&lt;/p&gt; &lt;p&gt;Comments are like footnotes in a book. Most readers will pause to see what a footnote says the first time they encounter one. But if what they find there is of no relevance or interest to them, they will soon train themselves to stop looking.&lt;/p&gt; &lt;h3&gt;Code&lt;/h3&gt; &lt;p&gt;What about your code? Surely that is all signal right? After all, we can’t delete 50% of the lines and leave the behaviour of the code intact. But the truth is that code can be written in a very noisy way. This happens when so much code for logging, or caching, or error handling, (or whatever) is mixed in that the structure and intent of the method in question is obscured from view. &lt;/p&gt; &lt;p&gt;The solution is simple: write clean code. Extract each task out into small, well-named helper methods or dependencies. This allows people to see the “signal” of what is going on, and only delve into the details that are of interest to them. Implementation details are usually noise.&lt;/p&gt; &lt;h3&gt;Summary&lt;/h3&gt; &lt;p&gt;Stop writing comments that are just noise. Delete comments that are wrong. Refactor “noisy” code out into helper methods. Learn what &lt;a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;clean code&lt;/a&gt; is. Hold fewer and shorter meetings. Write shorter documents. Tell me what I need to know. Stop wasting my time.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>clean code</category>
    <category>Software Development</category>
  </categories>
  <comments />
</post>