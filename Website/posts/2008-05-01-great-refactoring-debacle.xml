<post>
  <title>The Great Refactoring Debacle</title>
  <slug>great-refactoring-debacle</slug>
  <author>Mark Heath</author>
  <pubDate>2008-05-01 19:59:00</pubDate>
  <lastModified>2008-05-31 07:49:11</lastModified>
  <content>&lt;strong&gt;The Vision&lt;/strong&gt;  &lt;p&gt;I have been giving some technical seminars to the rest of the development team at my workplace every few months, trying to keep them up to date with good coding practices and the latest technologies. While a few of them are already quite interested in these topics, on the whole most are simply content to plough on with the knowledge they have and only learn new stuff when an obstacle confronts them. But on the whole, my presentations have been well received.&lt;/p&gt;  &lt;p&gt;It was a few months ago that I brought up the subject of &lt;strong&gt;refactoring&lt;/strong&gt;. Twenty developers all coding away merrily on the same project for two years things had resulted in some less than ideal code. It was not as if the product was low quality. Far from it. Our bug count was low and the customers who were using the product hadn't escalated any major issues to the development team.&lt;/p&gt;  &lt;p&gt;But there was a growing awareness that the codebase was getting a little out of hand, and management agreed. We were going to spend a few months simply working on the quality of the code, ready for a big &amp;quot;general release&amp;quot;. No new features, just bug fixing and &amp;quot;refactoring&amp;quot;.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;The Strategy&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;This was a &amp;quot;once in a blue moon&amp;quot; opportunity to right some of the wrongs from earlier phases of the project. I presented my opinions on where I thought our efforts would be best spent during our two months of refactoring. We would focus on &lt;strong&gt;code smells&lt;/strong&gt;, breaking huge classes and methods down into smaller pieces that did one thing and did it well.&lt;/p&gt;  &lt;p&gt;At the same time, the more daring developers would try to eradicate some of the very &lt;strong&gt;tight coupling&lt;/strong&gt; that had crept in, and to separate the &lt;strong&gt;GUI from business logic&lt;/strong&gt;. Without these two advances, any hopes of running &lt;strong&gt;automated tests&lt;/strong&gt; would be merely a pipe dream.&lt;/p&gt;  &lt;p&gt;Finally, there were some classes that were being used in multiple places resulting in it being far too easy to inadvertently break someone else's code. I proposed to separate this code off to form some new &lt;strong&gt;extensible components&lt;/strong&gt; that could be customised and used in different ways by different parts of the application.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;The Refactoring&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;So we got to work. The build-breaking changes went first. Thousands of lines of code were changed. Developers were delighted as they successfully turned previously intimidating classes into groups of much more manageable code. Some of the worst-designed features of the application gradually morphed into a more streamlined and extensible framework.&lt;/p&gt;  &lt;p&gt;There wasn't time for everything. In fact, some of my top recommendations had to be left to one side. And other ideas just proved too difficult. For example, I tried to extract some groups of Windows Forms controls from a Panel containing thousands of controls, but the process was just too fiddly (if only one of the refactoring tools could do this).&lt;/p&gt;  &lt;p&gt;The bug count dropped dramatically. In fact, it dropped so fast that most of the development were seconded to test to help them catch up. All was looking good.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;The Aftermath&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;Then came the system test. The first &amp;quot;full&amp;quot; system test in over a year. And there were &lt;em&gt;lots &lt;/em&gt;of new bugs found. On the whole we managed to stay on top of them, but as the release date grew closer and closer, some &amp;quot;showstopper&amp;quot; bugs came out of the woodwork. The release date slipped three or four times and ended up coming a few weeks late. The overrun wasn't huge by comparison with many other projects, but an explanation was needed.&lt;/p&gt;  &lt;p&gt;I wasn't in the meetings where blame was apportioned. In fact I was on holiday that week, but it was clear when I returned that a scapegoat had been identified. &lt;strong&gt;Refactoring &lt;/strong&gt;had caused us grief, and perhaps we shouldn't have done it. On the surface of things, it &lt;em&gt;was &lt;/em&gt;the refactoring that caused some of the very defects that delayed the release. &lt;/p&gt;  &lt;p&gt;Now I could get on my high horse and demand a chance to stand up for &amp;quot;refactoring&amp;quot;. I could point out that...&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;It's not really refactoring if you don't run unit tests (because you don't have any unit tests). It's simply re-architecting which is very risky.&lt;/li&gt;    &lt;li&gt;Refactoring is always best done on code that you are actively working on. You understand what it is doing and why, and you have already allocated some time to testing it. Diving into a class and refactoring it simply because it is &amp;quot;big&amp;quot; is also risky (especially if you don't have any unit tests).&lt;/li&gt;    &lt;li&gt;Refactoring is primarily about making small, &lt;em&gt;incremental &lt;/em&gt;changes. Over a long period of time the structure and design of the code should improve. Trying to do it all in one hit is risky.&lt;/li&gt;    &lt;li&gt;Refactoring &lt;em&gt;does &lt;/em&gt;introduce bugs from time to time, because &lt;em&gt;all &lt;/em&gt;modification to code risks introducing bugs. That is &lt;em&gt;equally true &lt;/em&gt;whenever you add features or fix bugs. Indeed, it could be argued that the new features that &amp;quot;sneaked in&amp;quot; to the refactoring phase were the cause of a lot of our problems.&lt;/li&gt;    &lt;li&gt;The main rewards of refactoring are felt in the&lt;em&gt; future. &lt;/em&gt;For example, new features can be added much more quickly. Bugs can be found and fixed much more easily. In fact, my team is already reaping the fruits of the refactoring in the new feature we are adding, but this kind of benefit is not highly &amp;quot;visible&amp;quot; to management. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;... well I &lt;em&gt;could &lt;/em&gt;point these things out, but I suspect it would just come across as whining because my idea of &amp;quot;refactoring&amp;quot; apparently didn't &amp;quot;work&amp;quot;. And if I say too much I risk someone deciding that refactoring should be &amp;quot;banned&amp;quot; because it is clearly too dangerous. &lt;/p&gt;  &lt;p&gt;So I'll keep my mouth shut, and continue to improve the codebase bit by bit, sticking to the &lt;strong&gt;code I am already working on&lt;/strong&gt;, and adding &lt;strong&gt;unit tests&lt;/strong&gt; as I go. Management won't credit any resulting quality enhancements or development speed increases to the discredited &amp;quot;refactoring&amp;quot; idea, but at the end of the day, much of my job satisfaction comes from the knowledge that I have contributed to a quality project.&lt;/p&gt;  &lt;p&gt;I suppose the bottom line is that the benefits of refactoring are not easily &lt;strong&gt;measurable&lt;/strong&gt;. Bug counts are measurable. Completing features is measurable. But what is not measurable is how much refactoring has contributed to the speed at which bugs are fixed and new features are added. And as the saying goes, &amp;quot;if you can't measure it, it doesn't exist&amp;quot;.&lt;/p&gt;  &lt;div class="wlWriterSmartContent" id="scid:0767317B-992E-4b12-91E0-4F059A8CECA8:34f33ff0-d5c8-4d63-b310-00a968480c41" style="padding-right: 0px; display: inline; padding-left: 0px; padding-bottom: 0px; margin: 0px; padding-top: 0px"&gt;Technorati Tags: &lt;a href="http://technorati.com/tags/refactoring" rel="tag"&gt;refactoring&lt;/a&gt;,&lt;a href="http://technorati.com/tags/unit%20testing" rel="tag"&gt;unit testing&lt;/a&gt;&lt;/div&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>Refactoring</category>
    <category>Software Development</category>
  </categories>
  <comments>
    <comment isAdmin="false" isApproved="true" id="7c4e52c8-7a22-4690-88ac-f7dd365ae412">
      <author>gondtalan</author>
      <email>noreply@blogger.com</email>
      <website>https://me.yahoo.com/gondtalan#36d09</website>
      <ip />
      <userAgent />
      <date>2008-05-01 22:36:00</date>
      <content>I agree with your statement that Refactoring is primarily about making small incremental changes.  Too often I see people using the term as a catch-all for any type of rework regardless the scale.</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="4c8225dd-01b8-4f31-bc55-9940e4a58224">
      <author>Anonymous</author>
      <email>noreply@blogger.com</email>
      <website />
      <ip />
      <userAgent />
      <date>2008-05-02 04:36:00</date>
      <content>Great article.  Too often spending the time now to decouple and cleanup is called refactoring, when you are really just playing catchup from the last crunch to must ship deadline.</content>
    </comment>
  </comments>
</post>