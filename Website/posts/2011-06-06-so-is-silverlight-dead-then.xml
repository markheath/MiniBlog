<post>
  <title>So … is Silverlight dead then?</title>
  <slug>so-is-silverlight-dead-then</slug>
  <author>Mark Heath</author>
  <pubDate>2011-06-06 12:05:00</pubDate>
  <lastModified>2011-06-06 12:05:48</lastModified>
  <content>&lt;p&gt;Microsoft’s Windows 8 announcement has generated a surprising amount of controversy given that what was shown (a fancy new start menu that can be navigated using touch alone) was exactly what everyone was expecting. The only thing that could conceivably be described as a surprise was that Microsoft’s offering for the slate will be the “full” Windows OS, rather than the Windows Phone 7 OS adapted for a larger screen.&lt;/p&gt; &lt;p&gt;Apparently you will be able to make stuff for this new touch interface with HTML5 and JavaScript. Quite how that makes Silverlight dead I am not sure. I certainly don’t see any reason to panic. Given that it is full Windows, you will be able to write apps for it in VB6, Delphi or QBasic if you really want to. If you can’t write Windows 8 apps in Silverlight I’ll eat my hat. And if there is, as expected, a Windows 8 app store, you can be sure you’ll be able to sell Silverlight apps on it (in fact, if they base it on the Windows Phone app store, then Silverlight might even be the preferred/required dev platform).&lt;/p&gt; &lt;p&gt;I suppose it is possible that you won’t be able to make “tiles” using Silverlight (though they haven’t announced that you can’t), but I can’t get too worked up about that. I don’t want my applications consuming loads of memory and CPU cycles &lt;em&gt;before&lt;/em&gt; I load them. Tiles should only be doing minimal processing.&lt;/p&gt; &lt;p&gt;Which brings us to the question everyone is asking. Is Silverlight dead? &lt;/p&gt; &lt;p&gt;When people call a technology “dead”, what they often really mean is “stable” and “mature”. I still develop &lt;strong&gt;WinForms &lt;/strong&gt;apps on a daily basis. The API is effectively complete. It hasn’t had any meaningful new features for years. But it is a mature framework. It does what it does well enough, and if Microsoft were still actively trying to shoehorn new features into it that would be a bad thing. After a while, what is needed is not new features, but a new development paradigm.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;WPF &lt;/strong&gt;was, at first, that new paradigm, making it easy to do what was a nightmare in WinForms. And it followed a similar path to maturity. It’s got all the main capabilities you need to build impressive looking LOB apps. Microsoft got some things right with WPF, but like WinForms, it too has its limitations. I am not concerned that there isn’t a vast number of new features being announced for it every six months.&lt;/p&gt; &lt;p&gt;And guess what, &lt;strong&gt;Silverlight&lt;/strong&gt; is on the same trajectory. Early releases picked up new capabilities at rapid pace. The fact it was chosen as the Windows Phone 7 dev platform has given it a new lease of life. But already it is reaching the stage where new versions are more incremental than revolutionary. That’s a good thing – the technology is approaching maturity.&lt;/p&gt; &lt;p&gt;To summarise: no need to panic. Keep building apps with the most appropriate technology that is available &lt;em&gt;now&lt;/em&gt;. Those apps will continue to work just fine for years to come. Don’t worry that new technologies come along every few years that seem to “kill” older ones. I for one am glad that I am not currently developing using Visual Basic 16 or MFC version 23. And in 5 years time, I fully expect that there will be something even better than Silverlight to write Windows apps in. If there isn’t, it will be Microsoft, not Silverlight that is dead.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>WPF</category>
    <category>Windows Forms</category>
    <category>Windows 8</category>
    <category>Silverlight</category>
  </categories>
  <comments />
</post>