<post>
  <title>Announcing Understanding Distributed Version Control</title>
  <slug>announcing-understanding-distributed</slug>
  <author>Mark Heath</author>
  <pubDate>2014-01-27 21:51:00</pubDate>
  <lastModified>2014-01-27 21:51:04</lastModified>
  <content>&lt;p&gt;I’m very pleased to announce that my third Pluralsight course has been published today. This one is entitled “&lt;a href="http://pluralsight.com/training/Courses/TableOfContents/understanding-distributed-version-control-systems"&gt;Understanding Distributed Version Control&lt;/a&gt;”. Regular followers of my blog will know this is a subject &lt;a href="/category/dvcs"&gt;I often write about&lt;/a&gt;, and have spoken on it at various developer groups. This course draws and expands on that material to provide what I hope will be a really accessible introduction to what Distributed Version Control systems are, how they work, what the workflow is, and why you should consider using them. &lt;/p&gt; &lt;p&gt;The course is aimed at anyone who is interested in finding out what all the fuss is about DVCS. I know that when I started investigating DVCS, it seemed quite confusing at first, so I have tried to make the type of course that I wish I had seen back then. I focus in particular on explaining the way that DVCS systems store the revision history (in a graph structure known as a “DAG”). Personally I think that once this concept becomes clear in your mind, much of the complexity of DVCS goes away.&lt;/p&gt; &lt;p&gt;I have also tried to show what benefits there are to switching from centralised to distributed version control systems. I know many developers quite sensibly take an “if it ain’t broke don’t fix it” attitude, and so can be reluctant to consider such a fundamental shift in the way they use version control. I’ve tried to show that whether you work alone on a “single developer project”, or work on open source, or work in a large team of developers commercially, DVCS has some very compelling benefits. I’ve also tried to be open about some of the limitations of DVCS compared with centralized tools. I am very enthusiastic about the power and potential of DVCS, but I do recognise that there are still some rough edges in the tooling at the moment.&lt;/p&gt; &lt;p&gt;The final thing I try to do in this course is give you a feel for the general workflow involved in using DVCS day to day. I’ve done this by showing demos in both Mercurial and Git. I quite deliberately chose to use two different DVCS tools to show that the main principles are the same, irrespective of the particular tool you choose. Since there are many other great tutorials as well as &lt;a href="http://pluralsight.com/training/Courses#source-control"&gt;Pluralsight courses&lt;/a&gt; going into more detail on the specifics of individual DVCS such as Git or Mercurial, I didn’t want to repeat that material. Really my course is designed as a precursor to those courses, helping you understand the big picture, before you get into the nitty-gritty of learning the command line syntax for various operations. &lt;/p&gt; &lt;p&gt;I hope you enjoy the course and find it helpful. I love to hear feedback from people who watched the course, so let me know how you get on with it. I’m always wanting to know how I can improve my courses, so any constructive criticism will also be gratefully received. &lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>DVCS</category>
    <category>Version Control</category>
    <category>git</category>
    <category>Pluralsight</category>
    <category>Mercurial</category>
  </categories>
  <comments />
</post>