<post>
  <title>NAudio 1.4 Release Notes</title>
  <slug>naudio-14-release-notes</slug>
  <author>Mark Heath</author>
  <pubDate>2011-04-20 23:23:00</pubDate>
  <lastModified>2011-04-20 23:23:59</lastModified>
  <content>&lt;p&gt;It has been far too long coming I know, but I have finally got round to uploading a release candidate for &lt;a href="http://naudio.codeplex.com/releases/view/64830"&gt;NAudio 1.4&lt;/a&gt;. Assuming no glaring bugs are reported in the next week or so, I’ll drop the “RC” from the title.&lt;/p&gt; &lt;p&gt;So what’s new in this latest release?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Major interop improvements to support native x64. Please note that I have not in this release changed the dll’s target platform away from x86 only as I don’t personally have an x64 machine to test on. However, we are now in a state where around 95% of the interop should work fine in x64 mode so feel free to recompile for “any CPU”. You should also note that if you do run in native x64 mode, then you probably will find there are no ACM codecs available, so WaveFormatConversionStream might stop working – another reason to stay targetting x86 for now.&lt;/li&gt; &lt;li&gt;There have also been major enhancements to MP3 File Reader, which is the main reason for pushing this new release out. Please read &lt;a href="/post/state-of-mp3-playback-support-in-naudio"&gt;this post&lt;/a&gt; for more details as this is a breaking change – you no longer need to use a WaveFormatConversionStream or a BlockAlignReductionStream. &lt;/li&gt; &lt;li&gt;More examples IWaveProvider implementers have been added, including the particularly useful BufferedWaveProvider which allows you to queue up buffers to be played on demand.&lt;/li&gt; &lt;ul&gt; &lt;li&gt;BufferedWaveProvider&lt;/li&gt; &lt;li&gt;Wave16toFloatProvider&lt;/li&gt; &lt;li&gt;WaveFloatTo16Provider&lt;/li&gt; &lt;li&gt;WaveInProvider&lt;/li&gt; &lt;li&gt;MonoToStereoProvider16&lt;/li&gt; &lt;li&gt;StereoToMonoProvider16&lt;/li&gt; &lt;li&gt;WaveRecorder&lt;!--EndFragment--&gt;&lt;/li&gt;&lt;/ul&gt; &lt;li&gt;The NAudioDemo project has been updated to attempt to show best practices (or at least good practices) of how you should be using these classes.&lt;/li&gt; &lt;li&gt;The NAudioDemo project also now demonstrates how to select the output device for WaveOut, DirectSoundOut, WasapiOut and AsioOut.&lt;/li&gt; &lt;li&gt;WaveChannel32 can now take inputs of more bit depths – 8, 16, 24 and IEEE float supported. NAudioDemo shows how to play back these files.&lt;/li&gt; &lt;li&gt;A general spring clean removed a bunch of obsolete classes from the library.&lt;/li&gt; &lt;li&gt;AsioOut more reliable, although I still think there are more issues to be teased out. Please report whether it works on your hardware.&lt;/li&gt; &lt;li&gt;WaveFileReader and WaveFileWriter support for 24 and 32 bit samples&lt;/li&gt; &lt;li&gt;Allow arbitrary chunks to appear before fmt chunk in a WAV file&lt;/li&gt; &lt;li&gt;Reading and writing WAV files with Cues&lt;/li&gt; &lt;li&gt;Obsoleted some old WaveFileWriter and WaveFileReader methods&lt;/li&gt; &lt;li&gt;Fixed a longstanding issue with WaveOutReset hanging in function callbacks on certain chipsets&lt;/li&gt; &lt;li&gt;Added sequencer specific MIDI event&lt;/li&gt; &lt;li&gt;RawWaveSourceStream turns a raw audio data stream into a WaveStream with specified WaveFormat&lt;/li&gt; &lt;li&gt;A DMO MP3 Frame Decoder as an alternative to the ACM one&lt;/li&gt; &lt;li&gt;Easier selection of DirectSound output device&lt;/li&gt; &lt;li&gt;WaveOut uses 2 buffers not 3 by default now (a leftover from the original days of NAudio when my PC had a 400MHz Pentium II processor!).&lt;/li&gt; &lt;li&gt;Lots more minor bug fixes &amp;amp; patches applied – see the &lt;a href="http://naudio.codeplex.com/SourceControl/list/changesets"&gt;check-in history&lt;/a&gt; for full details&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Let me take this opportunity to say thank you to those who have offered many feature suggestions, patches and bug reports. It is also very exciting to see NAudio being used for all kinds of cool applications. I am trying to keep the main project page updated with a list of all of them so get in touch and tell me what you are using NAudio for.&lt;/p&gt; &lt;p&gt;I am sorry I have struggled to keep up with all the questions appearing on the &lt;a href="http://naudio.codeplex.com/discussions"&gt;NAudio forums&lt;/a&gt; and a growing number of &lt;a href="http://stackoverflow.com/questions/tagged/naudio"&gt;stackoverflow NAudio questions&lt;/a&gt;. I try to answer everything, but sometimes I get too far behind and some questions have been left unanswered. NAudio is a spare time project for me, and with the recent birth of my fifth child, time is at a premium, so please be patient! Thanks also to those who have helped out by writing tutorials and answering questions (OpenSebJ and Yuval especially).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Should I Upgrade?&lt;/strong&gt; &lt;p&gt;If your app works fine then I actually don’t recommend that you update as there are a (small) number of breaking API changes (mostly for those using Mp3FileReader). However, for all new applications, or if you are prepared to make some small code changes, then I recommend you use the latest. &lt;p&gt;&lt;strong&gt;Using NAudio&lt;/strong&gt; &lt;p&gt;Using NAudio is as simple as referencing the NAudio DLL and using whatever pieces you need. (I might have a go at creating a NuGet package for NAudio to make things even easier). To find out how to do something, first look at the NAudioDemo application as this showcases a number of core features. There are also plenty of tutorials on this blog, and on the Documentation tab of the CodePlex site. If they don’t give you an answer, feel free to ask a question on the forums or Stack Overflow. &lt;p&gt;If you feel that NAudio is missing something you need, remember that NAudio is designed to make it as easy as possible to extend its feature set by inheriting from the base classes and interfaces such as WaveStream or IWaveProvider. In many cases you can add the new feature you need in for the outside. &lt;p&gt;&lt;strong&gt;Future&lt;/strong&gt; &lt;p&gt;There were of course, lots of things I wanted to get into this release that will have to wait for the next one. Here’s some of my ideas. Please feel free to get in touch and tell me what would be most beneficial to you. &lt;ul&gt; &lt;li&gt;Include an effects framework (based on what I prototyped with Skype Voice Changer)&lt;/li&gt; &lt;li&gt;Update the MP3 code to more easily support network streaming&lt;/li&gt; &lt;li&gt;Make a Silverlight / WP7 DLL containing the parts of NAudio that do not rely on Windows APIs.&lt;/li&gt; &lt;li&gt;ASIO recording support.&lt;/li&gt; &lt;li&gt;Possibly switch the source control over to Mercurial to make patching easier&lt;/li&gt; &lt;li&gt;And I’ll also try to write a few more tutorials here on my blog, as I know many people have complained about the lack of documentation.&lt;/li&gt;&lt;/ul&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>NAudio</category>
  </categories>
  <comments>
    <comment isAdmin="false" isApproved="true" id="71040f91-7212-43e0-b066-09793e695030">
      <author>DJAGAB</author>
      <email>noreply@blogger.com</email>
      <website />
      <ip />
      <userAgent />
      <date>2011-07-14 07:48:25</date>
      <content>Really nice peace of work!&lt;br /&gt;I am currently testing this version and combining it with playing flac with different bit depths. Oe question comes to mind: Does NAudio support gapless playback? If so, under what conditions?</content>
    </comment>
    <comment isAdmin="false" isApproved="true" id="1d9ae619-5026-419e-8e4a-6de8b3ed7412">
      <author>Mark H</author>
      <email>noreply@blogger.com</email>
      <website>http://www.blogger.com/profile/17900587357903273800</website>
      <ip />
      <userAgent />
      <date>2011-07-15 16:47:13</date>
      <content>what do you mean by &amp;quot;gapless&amp;quot;? You could certainly avoid closing and reopening the sound device between playing songs. You could implement your own crossfade from one track to another to take it a step further. For completely &amp;quot;gapless&amp;quot;, presumably you would need to implement silence detection at the beginning and end of files as well.</content>
    </comment>
  </comments>
</post>