<post>
  <title>Primary Keys and URLs</title>
  <slug>primary-keys-and-urls</slug>
  <author>Mark Heath</author>
  <pubDate>2008-05-16 10:54:00</pubDate>
  <lastModified>2008-05-16 10:54:00</lastModified>
  <content>&lt;p&gt;About a year ago, I &lt;a href="/post/identity-or-uniqueidentifier-guid-for"&gt;blogged&lt;/a&gt; about the relative merits of using integers or GUIDs as primary keys in databases. The particular cause for concern was what the URLs would look like:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mysite.com/View.aspx?id=104"&gt;www.mysite.com/View.aspx?id=104&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;which looks much nicer than&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mywebsite.com/View.aspx?id=015B34D5-A301-4543-AE1A-16708B19F602"&gt;www.mywebsite.com/View.aspx?id=015B34D5-A301-4543-AE1A-16708B19F602&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;With the advent of ASP.NET MVC, the choice becomes something like:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mysite.com/product/104"&gt;www.mysite.com/product/104&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;or&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mywebsite.com/product/015B34D5-A301-4543-AE1A-16708B19F602"&gt;www.mywebsite.com/product/015B34D5-A301-4543-AE1A-16708B19F602&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;It was because of the consideration of what the URL would look like that I chose to stick with integers for the database I was using at the time. &lt;/p&gt;  &lt;p&gt;But the more I have thought about this problem, the more I have come to the conclusion that the database row identifier should never appear in the URL anyway. After all, if you are displaying products, they will also have a unique product code. If you are displaying user details, they will have a user name. If you are displaying categories, they will have a unique name. Even with a blog or CMS system, the trend now is to have a &amp;quot;&lt;a href="http://codex.wordpress.org/Glossary#S"&gt;slug&lt;/a&gt;&amp;quot; to give a unique string for each post to use in the &amp;quot;&lt;a href="http://en.wikipedia.org/wiki/Permalink"&gt;permalink&lt;/a&gt;&amp;quot;, often combined with the year and month to help avoid naming conflicts. So for example:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mysite.com/product/X1494-M"&gt;www.mysite.com/product/X1494-M&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mysite.com/category/programming"&gt;www.mysite.com/category/programming&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mysite.com/user/mheath"&gt;www.mysite.com/user/mheath&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mysite.com/blog/2008/5/welcome-to-my-new-site"&gt;www.mysite.com/blog/2008/5/welcome-to-my-new-site&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;If you allow these &amp;quot;slug&amp;quot; fields to be editable by the user, you can use genuinely meaningful URLs, without ever needing to reveal the database key to the user. &lt;/p&gt;  &lt;p&gt;So I'm leaning towards using GUIDs again. The only case where I think I would need them to appear in a URL is in admin specific links such as editing or deleting a blog entry, where it would be safer to use them just in case the slug was not unique. They may also be useful to form &lt;em&gt;really&lt;/em&gt; permanent permalinks for the cases where the slug itself may be changed in the future.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>ASP.NET</category>
    <category>ASP.NET MVC</category>
  </categories>
  <comments />
</post>