<post>
  <title>Visual Studio Debugging Feature - Tracepoints</title>
  <slug>visual-studio-debugging-feature</slug>
  <author>Mark Heath</author>
  <pubDate>2008-11-19 17:15:00</pubDate>
  <lastModified>2011-07-04 16:18:25</lastModified>
  <content>&lt;p&gt;While watching the PDC 2008 session on &lt;a href="http://channel9.msdn.com/pdc2008/TL59/"&gt;Visual Studio Debugger Tips and Tricks&lt;/a&gt; (TL59), I came across a handy Visual Studio debugging feature I didn't know about - tracepoints. A tracepoint is simply a breakpoint that will emit a debug trace statement when it is reached. It can emit things like the current function name, stack trace, or the contents of a variable. What's really cool is that you don't have to actually stop execution. This allows you to quickly add debugging statements without the need to check out your code or remember to take the Debug.WriteLine statements out afterwards.&lt;/p&gt; &lt;p&gt;It's really handy for working out what order things are getting called in multi-threaded code, when setting normal breakpoints would change the order of execution. I have also used them a bit for performance measurements, although I still need to create and start a Stopwatch instance in the code itself (perhaps there is another trick I am missing).&lt;/p&gt; &lt;p&gt;To create a tracepoint, simply create a normal breakpoint and right-click it, and select the &lt;strong&gt;"When Hit..."&lt;/strong&gt; option.&lt;/p&gt; &lt;p&gt;&lt;a href="/posts/files/visual-studio-debugging-feature-1.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Creating a tracepoint step 1" border="0" alt="Creating a tracepoint step 1" src="/posts/files/visual-studio-debugging-feature-1.png" width="197" height="205"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;This brings up a dialog that allows you to specify the format of the trace statement, as well as allowing you to specify that it should continue execution (otherwise this will just remain a normal breakpoint). Finally, you can specify a macro to be run as well. The dialog gives good instructions for how to specify the tracepoint message. Most useful is being able to put an expression in curly braces. For example, &lt;strong&gt;{stopwatch.ElapsedMilliseconds}&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="/posts/files/visual-studio-debugging-feature-2.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="Creating a tracepoint step 2" border="0" alt="Creating a tracepoint step 2" src="/posts/files/visual-studio-debugging-feature-2.png" width="429" height="371"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Once you have done this, the tracepoint is indicated by a diamond instead of the normal circle:&lt;/p&gt; &lt;p&gt;&lt;a href="/posts/files/visual-studio-debugging-feature-3.png"&gt;&lt;img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="A tracepoint" border="0" alt="A tracepoint" src="/posts/files/visual-studio-debugging-feature-3.png" width="203" height="100"&gt;&lt;/a&gt; &lt;/p&gt; &lt;p&gt;It's available in both Visual Studio 2005 and 2008.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories />
  <comments />
</post>