<post>
  <title>Essential Developer Principles #2–Don’t Reinvent the Wheel</title>
  <slug>essential-developer-principles-2dont</slug>
  <author>Mark Heath</author>
  <pubDate>2011-06-16 22:18:00</pubDate>
  <lastModified>2011-06-16 22:18:53</lastModified>
  <content>&lt;p&gt;For some reason, developers have a tendency towards a “&lt;a href="http://en.wikipedia.org/wiki/Not_Invented_Here"&gt;not invented here&lt;/a&gt;” mentality. Sometimes it is simply because we are unaware of any pre-existing solutions that address out problem. But very often, we suspect that it will be far too complicated to use a third-party framework, and much quicker and simpler to write our own. After all, if we write our own we can make it work &lt;em&gt;exactly &lt;/em&gt;how we want it to.  &lt;p&gt;&lt;b&gt;Reinventing the Framework&lt;/b&gt;&amp;nbsp; &lt;p&gt;The arguments for reinventing the wheel initially seem compelling, mainly because most programming problems seem a lot simpler at first than they really are.  &lt;p&gt;So we head off to create our own chart library, our own deployment mechanism, our own XML parser, our own 3D rendering engine, our own unit test framework, our own database, and so on.  &lt;p&gt;Months later we realise that our own custom framework is incomplete, undocumented and bug ridden. Instead of working on features that our customers have actually asked for, all our effort and attention has been diverted into maintaining these supporting libraries.  &lt;p&gt;It is almost always the right choice to take advantage of a mature, well documented, existing framework, instead of deciding to create a bespoke implementation.  &lt;p&gt;&lt;b&gt;Repeatedly Reinventing&lt;/b&gt;  &lt;p&gt;Another variation on the reinventing the wheel problem is when a single (often enterprise scale) application contains multiple solutions to the same problem. For example, there might be two separate bits of code devoted to reading and writing CSV files. Or several different systems for messaging between threads. This usually happens because the the logic is so tightly coupled to its context that we can’t reuse it even if we want to. &lt;/p&gt; &lt;p&gt;&lt;b&gt;... except when ...&lt;/b&gt;  &lt;p&gt;As with most developer principles, this one has some exceptions. I think there are three main cases in which it is OK to reinvent the wheel. These are… &lt;p&gt;&lt;b&gt;1. Reinvent to learn&lt;/b&gt;  &lt;p&gt;We don’t need another blog engine, but we do need more developers who &lt;a href="http://blog.wekeroad.com/2009/08/10/be-a-good-jedi-build-your-own-blog"&gt;know how to build one&lt;/a&gt;. Likewise, we probably don’t need yet another ORM, or yet another IoC container, or yet another MVVM or MVC framework. But the process of building one, even if it is never completed, is an invaluable learning exercise. So go ahead, invent your own version control system, encryption algorithm or operating system. Just don’t use it in your next commercial product unless you have a &lt;em&gt;lot&lt;/em&gt; of spare time on your hands.  &lt;p&gt;&lt;b&gt;2. Reinvent a simpler wheel&lt;/b&gt;  &lt;p&gt;There are times when the existing offerings are &lt;i&gt;so&lt;/i&gt; powerful and feature-rich that it seems overkill to drag a huge framework into your application just to use a fraction of its powers. In these cases it &lt;em&gt;might&lt;/em&gt; make sense to make your own lean, stripped down, focused component that does only what you need.  &lt;p&gt;However, &lt;em&gt;beware of feature creep&lt;/em&gt;, and beware of problems that seem simple until you begin to tackle them. A good example of creating simpler alternatives is &lt;a href="http://www.hanselman.com/blog/HanselminutesPodcast262TheRiseOfTheMicroORMWithSamSaffronAndRobConery.aspx"&gt;Micro-ORMs&lt;/a&gt;, which are just a few hundred lines of code, stripped down to the bare essentials of what is actually needed for the task at hand. &lt;p&gt;&lt;b&gt;3. Reinvent a better wheel&lt;/b&gt;  &lt;p&gt;There are those rare people who can look at the existing frameworks, see a limitation with them, imagine a better alternative, and build it. It takes a &lt;i&gt;lot&lt;/i&gt; of time to pull this off, so it doesn’t make sense if you only need it for one project. If however, you are building a framework to base &lt;i&gt;all&lt;/i&gt; the applications you ever write on, there is a chance that it will pay for itself over time.  &lt;p&gt;An example of this in action is &lt;a href="http://fubumvc.com/"&gt;FubuMVC&lt;/a&gt;, an alternative to ASP.NET MVC that was designed to work &lt;i&gt;exactly&lt;/i&gt; the way its creators wanted. The key is to realise that they have gone on to build a lot of commercial applications on that framework. &lt;p&gt;In summary, &lt;em&gt;don’t reinvent the wheel &lt;/em&gt;unless you have a &lt;em&gt;really &lt;/em&gt;good reason to. You’ll end up wasting a lot of time and resources on development that is only tangentially related to your business goals. &lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>Developer Principles</category>
  </categories>
  <comments />
</post>