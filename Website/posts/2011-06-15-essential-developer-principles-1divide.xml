<post>
  <title>Essential Developer Principles #1–Divide and Conquer</title>
  <slug>essential-developer-principles-1divide</slug>
  <author>Mark Heath</author>
  <pubDate>2011-06-15 22:08:00</pubDate>
  <lastModified>2011-07-01 21:26:53</lastModified>
  <content>&lt;p&gt;&lt;em&gt;With this post I am starting a new series in which I intend to cover a miscellany of developer ‘principles’. They are in no particular order, and I’m not promising any great regularity but I am intending to use some of the material I present here as part of the developer training where I work, so please feel free to suggest improvements or offer counterpoints.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The essence of software development is divide and conquer. You take a large problem, and break it into smaller pieces. Each of those smaller problems is broken into further pieces until you finally get down to something you can actually solve with lines of code.&lt;/p&gt; &lt;p&gt;If you can’t break problems down into constituent parts, you don’t have what it takes to be a programmer. Apparently some who purport to be developers &lt;a href="http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html"&gt;can’t even solve trivial problems like FizzBuzz&lt;/a&gt;. They can’t see that to solve FizzBuzz (the “big” problem), all they need to do is solve a few much simpler problems (count from 1 to 100, see if a number is divisible by three, see if a number is divisible by 5, print a message). Once you have done that, the pieces aren’t too hard to put together into a solution to the big problem.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Cutting the Cake&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;But being a good developer is not just about being able to decompose problems. If you need to cut a square birthday cake into four equal pieces there are several ways of doing it. You could cut it into four squares, four triangles, or four rectangles, to name just a few of the options. Which is best? Well that depends on whether there are chocolate buttons on top of the cake. You’d better make sure everyone gets an equal share of those too or there will be trouble.&lt;/p&gt; &lt;p&gt;A good developer doesn’t just see that a problem &lt;em&gt;can &lt;/em&gt;be broken down; they see &lt;em&gt;several ways &lt;/em&gt;to break it down and select the most appropriate.&lt;/p&gt; &lt;p&gt;For example, you can slice your ASP.NET application up by every web page having all its logic and database access in the code behind – vertical slices if you like. Or you can slice it up in a different way and have your presentation, your business logic, and your database access as horizontal slices. Both are ways of taking a big problem and cutting it into smaller pieces. Hopefully I don’t need to tell you which of those is a better choice.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Keep Cutting&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Alongside the mistake of cutting a problem up in the wrong way likes the equally dangerous mistake of failing to cut the problem up small enough.&lt;/p&gt; &lt;p&gt;In the world of .NET you might decide that for a particular problem you need two &lt;strong&gt;applications&lt;/strong&gt; – a client and a server. Then you decide that the client needs two &lt;strong&gt;assemblies&lt;/strong&gt;, or DLLs. And inside each of those modules you create a couple of &lt;strong&gt;classes.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="/posts/files/essential-developer-principles-1divide-1.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="divide-and-conquer-1" border="0" alt="divide-and-conquer-1" src="/posts/files/essential-developer-principles-1divide-1.png" width="377" height="180"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;All this is well and good, but it means that your tree of hierarchy has only got three levels. As your implementation progresses, &lt;em&gt;something &lt;/em&gt;has to receive all the new code you will write. Unless you are willing to break the problem up further, what will happen is that those classes on the third level will grow to contain hundreds of long and complicated methods. In other words, our classes bloat:&lt;/p&gt; &lt;p&gt;&lt;a href="/posts/files/essential-developer-principles-1divide-2.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="divide-and-conquer-2" border="0" alt="divide-and-conquer-2" src="/posts/files/essential-developer-principles-1divide-2.png" width="555" height="283"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It doesn’t need to be this way. We can almost always divide the problem that a class solves into two or more smaller, more focussed problems. Understanding the divide and conquer principle means we keep breaking the problem down until we have classes that adhere to the “single responsibility principle” – they do just one thing. These classes will be made up of a small number of short methods. Essentially, we add extra levels to our hierarchy, each one breaking the problem down smaller until we reach an appropriately simple, understandable, and testable chunk:&lt;/p&gt; &lt;p&gt;&lt;a href="/posts/files/essential-developer-principles-1divide-3.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="divide-and-conquer-3" border="0" alt="divide-and-conquer-3" src="/posts/files/essential-developer-principles-1divide-3.png" width="287" height="281"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I’ve not shown it on my diagram, but an important side benefit is that a lot of the small components we create when we break our problems up like this turn out to be reusable. We’ve actually made some of the other problems in our application easier to solve, by virtue of breaking things down to an appropriate level of granularity. There are more classes, but less code.&lt;/p&gt; &lt;p&gt;And that’s it. Divide and conquer is all it takes to be a programmer. But to be a great programmer, you need to &lt;strong&gt;know where to cut&lt;/strong&gt;, and to &lt;strong&gt;keep on cutting &lt;/strong&gt;until you’ve got everything into bite-sized chunks.&lt;/p&gt;  </content>
  <ispublished>true</ispublished>
  <categories>
    <category>Developer Principles</category>
    <category>Single Responsibility Principle</category>
  </categories>
  <comments />
</post>